L'altro, l'uso di pericolazione.
Quindi, in terza ci sono dei ragazzi che vi ho fatto conoscere.
Uno era qui, l'altro era per il riconciato o l'influenza.
Con una schierina, forse loro non l'hanno visto.
Ma chi, Iari?
No, lui no.
In merito.
Tu forse c'eri, chi è che c'era?
In merito.
Forse non c'era.
Ma di terza?
Di terza hai detto?
Sì, sì.
Iari?
Iari, sì.
e allora o uno o l'altro quindi fanno lo stesso lavoro che sta facendo lui quindi gli insegna in pratica misare come si fa siccome sono andati a svegliare questo punto di vista loro potrebbero fare lo stesso lavoro che poi te, facciare lezioni alla registra e poi ci sputaliamo
le come lezioni, cioè, poi le condividiamo.
A me così in pratica mi interessa il git.
Quella è una cosa che poi, vorrei che facesse una lezione.
Mi piacerebbe che voi mi metteste d'accordo.
Ma sia git che chitab?
Git, chitab, perché siete voi.
Ma sono un po' di cose diverse.
Tuttamente sono le stesse cose.
Github è il sito che ti si interfaccia al programma, fondamentalmente.
Infatti io posso avere un reposito di Github non su Github, ma su un locale.
Non so, è la stessa cosa.
Vi propongo...
e ti dici mando!
si dai, conoscetevi io vado a fare un bel... perché io sono venuto prima no?
eh, mi chiedeva di venire, mi dicevi... e tuttanto lui arriva ieri!
eh, ma... animale di un buco!
vado, c'è un bel piattone!
stasera vi faccio male!
io lo faccio
io sono ITP però non di questo indirizzo siccome sono carenti di questo indirizzo non ci sono perché non vengono per 800 euro a scuola ma vanno a lavorare in azienda io sono un ITP di laboratorio ma di indirizzo commerciale quindi non so un cazzo di quello che sta dicendo lui
Stava a posto.
Sì, però per quanto riguarda andare in laboratorio, portarvi in laboratorio io vi ci porto tranquillamente.
Lui mi darà delle istruzioni, spero.
Voi le sapete seguire meglio di mio grido.
Quindi l'aiuto mio e il supporto c'è, però per me è un stroboto.
Poi mi vedrete prendere dei punti perché sto imparando anch'io.
Man mano che lui mi dice qualcosa inizio
Ho fatto sempre solo commerciale, grafica, moda e commerciale.
L'altra parte.
Diametralmente zero.
Quando sono stata a scuola, quando mi sono diplomata io nel 1994, che ho 48 anni, questo che esiste adesso non c'era, non esisteva.
Quindi anche io ho fatto l'indirizzo programmatore
era la prima classe, il primo anno sperimentale di programmazione e i professori non esistevano.
Quindi c'era il tizio di turno che magari ha iniziato, che cos'è, il computer, come funziona, classico materiale dottrinale delle TIC, diciamo, grossolanamente.
Quindi, niente, io vi voglio aiutare.
Già ho il timore e il terrore del prof.
Poi ci fai l'abitudine.
No, perché mi mette l'ansia.
Già so che il suo giudizio mi ha... Sì, sì, è il giudizio divino.
Ma sai cosa?
Io non sono così, sono molto attiva, il laboratorio mi piace fare, voi non mi potete far fare un cazzo.
io entro in laboratorio, ragazzi accendete, andiamo a bere, andiamo a fare la fattura sì no, naturalmente cercherà un approccio nel senso lei ci può fare più la parte, lui ci può fare più la parte teorica e poi andremo in laboratorio e voi la considerete, perché con me in laboratorio lo farete, perché sto qua per questo vabbè, magari lui cerca anche di coinvolgerti con le tue... sì sì no, ma lui infatti ma... le mani, infatti, lui è un pezzo di una madre
perché l'anno scorso avevamo un ragazzo che anche lui aveva fatto commerciale per riuscire a integrare anche lui stavamo facendo un lavoro su statistica con le matrici poi anche stava cercando di... a me dispiace fondamentalmente c'è già meno male che ci andiamo... no no ma quello che mi riguarda, cioè andiamoci in laboratorio, lavorate, applicatevi
vi aiuto per quel poco che riesco a capire ma sapete più voi che io il problema è il sistema di reclutamento docente perché se io sono commerciale tu non mi devi inserire dove non posso o dove non ci arrivo sto spiegando ai ragazzi i problemi del reclutamento del MTP ma li conosciamo già loro mi hanno detto che è un problema ormai cronico
e a me dispiace perché vorrei dare una mano lo so ma sei pure perché mi sento inutile allo scorso aveva i capelli eh?
oh poveretto no stavo spiegando a loro che io non sono così cioè io nel laboratorio mi animo è perché quello che faccio però qua
Io sto prendendo appunto, ieri ho imparato tantissimo e a dire il vero ho scaricato XAMPP non capisco niente, l'ho scaricato, ha funzionato però piano piano mi metterò, cioè farò lo stesso che fate voi cercherò di adeguarmi, magari così può essere che negli anni mi formo e poi saprò fare bene
visto che già l'anno scorso mi era arrivata una suplenza e io la rifiutai perché io non mi sono sentita.
Ma guarda, io te lo dico, di che qui è arrivata... c'è stata una miniatura... l'hai conosciuta forse l'anno scorso?
No, in quarta... sì, dovrebbe essere in quinta quest'anno.
Mi è arrivata un suplente... no, uno studente e... un po' più che quello di te.
Ma scusa, quello con gli occhiali?
Dei capelli rundi?
No... Ma come si chiamava poi per l'Alzheimer?
Come si chiamava il ragazzo?
E' venuto... No, come si chiamava?
Lui praticamente aveva rifiutato una suplenza al Conti.
Come si chiamano i lavoratori?
Interconti.
Il motivo?
Ero ragioniero del programma Azzurra.
e io sono stata io l'anno scorso a letto le conti non sapeva niente tutto è fatto si è scritto qui ma come studente infatti hai detto ma scusami Nessi non ha fatto i conti cioè che poi era un carino hai perso un lavoro hai perso è chiaro che dici vabbè aveva dell'altro dice sì però io non me la sono sentita di accettare quelle cose perché chiaramente non ero in condizione di fare quelle cose poi si è fatta la terza
Con lui ho fatto anche il TPSI e ha visto quel tipo di programmazione che... ...teni conto che lui già aveva base di programmazione.
Chiaro.
Stiamo parlando di tanti anni fa.
Io quello che c'ho lontano, 94, mi sono diplomata io.
All'epoca era la prima...
classe sperimentale di informatica quindi anche i docenti non è che erano... però ci sto pensando lo sai che questo fatto proprio ieri pensavo a iscrivermi magari a fare un corso cioè iscrivermi proprio a scuola per prendermi per fare io ti dico quell'esperienza che infatti anche lui ha detto ma attraverso lui era dentro anche perché poi
Era nel mondo gestionale, la domanda che hai fatto a te, dimmi quali sono i tuoi punti di forza e quindi cerchiamo di lavorare sui punti di forza.
Il discorso del gestionale, lui aveva lavorato sui gestionali, quindi aveva già delle altre basi, e poi ovviamente aveva anche basi di programmazione, infatti tante cose, tipo i cicli del spiego,
E poi niente, una delle cose che faceva, che poi tra l'altro erano tra i più anziani, ecco perché dico non mi fido di lui perché ancora è uno scappato da casa, come non mi fidavo di lui?
Adesso poco poco, perché?
Perché vengono a cerare perché sapendo che non si fa un cazzo, punto.
Poi incontrano me, gli faccio il culo e poi dicono forse hai due possibilità, uno che ne va al Giorgi,
liceo informatica e non si fa un cazzo prima rimandavo a Sesto infatti quella scuola è chiusa lo Spinelli, sì l'ITIS di Sesto, Serare c'erano i pentrinelli eravamo gli unici c'erano i pentrinelli tutti se ne andavano quella era una scuola che io non consideravo una buona scuola quella è chiusa io sono ancora qui
non so per quanto, perchè se qua andà al circolo... è moltificante, è moltificante, effettivamente quindi, o vuoi imparare, se vuoi imparare, pressa se vuoi prendere un pezzo di carta, soffrirai?
questo per altri motivi, per una cosa è certa, cioè
Non sarà facile.
Adesso facciamo la lezione come dicevamo, no?
Perché adesso, tranne te, gli altri vengono da... e anche tu, da tenerla svegliata, un po' di più rispetto ad un sforzo.
Meno spolastico, eh?
Perché stai volando un bacio.
Ho visto quello che mi hai dato, potete fare di più.
C'è una cosa che mi piacerebbe che voi facesse stasera.
Vediamo come partiamo.
Non avrete involuto qualcosa in più sulle eccezioni.
Io ho detto che le eccezioni è una cosa che vi ritroverete dappertutto indipendentemente dalla presenza a scienza della programmazione degli oggetti.
E' un modo di valore male che dovete acquisire.
Io ho visto che Yusuf ha usato le eccezioni nel suo esercizio.
E non c'è.
Ah, sì, no, no, va benissimo, però ti chiedo, non voglio che sia soltanto uno spot, vorrei che, come io ho detto l'argomento, non è banale.
E banale sono tre parole, tre che c'è troppo.
C'è tanto altro, adesso cercherò di prenderlo.
Però è un modo di radionare che dovete, di pensare.
Non ho fatto la cosa.
Ne serve niente.
E poi, come progettino, un po' di ingredienti ce li abbiamo.
La cosa che noi avevamo chiesto l'anno scorso.
Vorrei che cominciate a pensare alla classe carrello.
Carrello della spesa.
attenzione, non vi chiedete come fare un carrello della spesa fate un lavoro iniziale quando non conoscete, quando viene chiesto qualcosa che non conoscete a questo punto fate le dovute ricerche per capire cos'è un carrello, come funziona anche perchè poi i carrelli scattano il meccanismo lo usiamo per fare le pesce online in automatico, diciamo che so cos'è
No, usi.
Come dire, so guidare, sì.
Se non hai mai aperto il Copan, è inutile guardarci dentro, inizia a trovare le cose.
Quindi, farti un'idea di cos'è un carrello, e poi ecco se vuoi presentare questo carrello.
Questo mi serve per il futuro, perché questo modo di ragionare, di approcciare, e voglio la classe,
perché questo ha a sostenere il fatto che io comincio a crearmi tutta una serie di classi che mi serviranno per generare obiettivi che dovrebbero utilizzare nell'applicazione.
Sì, come l'hanno scorto, una certa pavizia.
quindi questo mi piacerebbe, tipo per esempio, un'altra cosa che mi piacerebbe fare, nella venuta di demo, se ci pensate, sito di commercio elettronico, i prodotti, no?
il concetto di prodotti, che più può essere mai il concetto di prodotti, una classe, ma che no?
nel senso che non esiste il concetto prodotto perché non esiste un prodotto, esiste la bottiglia d'acqua come esiste il piatto di pasta però acqua e pasta hanno qualcosa di comune quindi il concetto di prodotto è la generalizzazione della bottiglia di acqua e anche qui questo è il liquido, quello è il solido
Volete progettare una gerarchia?
Inventatevi pure qualche cosa.
Vi ho appena dato un suggerimento.
Invece di parlare delle solite forme, parliamo ovviamente dei prodotti.
Mi creo uno schema, la schematizzazione di un albero di prodotti.
albero gelattico, con un concetto generale, il prodotto, che non esiste in natura, servo soltanto per dare un'idea, e poi le varie forme di specializzazione.
Qui si applicano tutti i criteri, i concetti di ereditarietà.
Il primo alpesmo, chiaro, lo andremo ad applicare in un momento in cui si chiama applicazione.
e quindi io predispongo tutto l'impianto per una ipotetica applicazione.
L'applicazione non c'è.
Devo progettare per classi un discorso delle prove, il discorso di avere il main, di avere il main.
A me interessa che progettiate le classi che potranno essere utilizzate.
trovare, questo non è una cosa di fare, parlatene tra di voi, tanto siete pochi, tipo uno si occupa del carrello, l'altro si occupa del prodotto, l'altro si occupa, non lo so, della questione degli accanto, cioè un'idea su cui poter lavorare e quindi preparare tutta una serie di classi che ci potranno servire in tanti ambiti differenti.
se voi progettate il carrello, state tranquilli, poi ti chiedo la stessa cosa di farlo in PHP, poi ti chiedo di farlo in Java, ti chiedo di fare un coltanto usato di fatto.
Quindi cominciamo a materializzare noi i concetti realizzando qualcosa di concreto.
L'altra cosa su cui stavo riflettendo era cos'è un sensore?
Ok, la classe, sensore, però ci sono il sensore di temperatura, il sensore di umidità.
Il concetto di sensore esiste, non ha senso di esistere da solo.
Serve per dare un'idea iniziale, però non è dettagliata, non serve a niente dal punto di vista pratico.
Mi dà un sensore per fare cosa?
Nulla.
perché dovrò sempre specificare il tipo di sensore e poi entro nel merito, entro nel merito dicendo, ah sì, quali sono le caratteristiche?
Quali sono le caratteristiche leggi che cosa trasforma?
E' lì, capirete quando significa che è una classe.
Le classi indossivano, questi sono i metodi di questa velocità, le proprietà.
bisogna entrare nell'ottica appunto di presentare un qualcosa, un oggetto ma anche ci sono le altre, ma anche la componentista elettronica tipo la basetta, cosa ci metto su una basetta, versione di un biodo?
resistenza?
poi transistor?
un convertitore?
Cioè, se vi volete allegare, partite con qualcosa di concreto, non di sbagliare.
Ripeto, sono stufo di sentirmi sempre appunto questa visione gestionale della pacienda, no?
L'industriale è quello che lavora con i sensori, per capirci insomma, no?
Non è che a volte ci senti che hai il prodotto, la spesa, il consumo, e giusto.
E' più facile per quelli che li sentono, no?
Però...
o plastica.
Se possiamo anche inventarci qualcos'altro, meglio.
Vabbo, torniamo a noi.
Torniamo a noi.
Me volevo riprendere quello che ci siamo detti l'ultima volta.
Allora, faccio sempre il sintesi di quello che abbiamo detto.
Allora, abbiamo parlato ovviamente di gerarchia,
Poi abbiamo parlato con relativa eredità.
Poi abbiamo parlato di polimorfismo.
con l'introduzione delle funzioni virtuali poi a questo punto abbiamo parlato di grazie astrate e quando abbiamo parlato di grazie astrate abbiamo parlato di funzione pure
Ok, penso per quanto riguarda, abbiamo aggiunto anche un certo esempio di interfaccia, però attenzione, il C++ non è dotato dell'interfaccia, io diciamo ho abusato nell'uso del termine interfaccia, perché non esiste l'interface del C++, interfaccia
il concetto di interfaccia è incontrato in Java, in C per interfaccia c'è una simulazione dell'interfaccia e quindi per associazione io posso dire che è un'interfaccia come quella del Java, perché li esistono in C non esiste l'interfaccia come concetto però può ottenere lo stesso effetto come
creando la pasta stratta e ponendo tutti i metodi e inserendo solo metodi puri.
Chiaro?
Quindi è una simulazione che viene fatta, ma non esiste il concetto di interfaccia in JavaScript.
Questo ovviamente, e completiamo il discorso, la volta scorsa abbiamo parlato di un argomento
di un argomento che non era esattamente legato alla problemazione degli oggetti.
Il discorso dell'incessione vi ha detto che ci consente di risolvere un problema.
Il problema che ci consente di risolvere, ha voluto separare il coro dell'applicazione dalla gestione degli errori.
Quindi un programmatore in pratica prima, quando non c'erano le eccezioni, si sviluppava l'applicazione e si gestiva in tutti i casi tutte le criticità dell'applicazione.
L'obiettivo è aumentare la produttività.
e quindi praticamente mantenere il programmatore concentrato sul coro del problema e quindi cercare di svincolarlo dalla gestione delle eccezioni che lo avrebbero potuto distrarle e quindi ovviamente avrebbero inevitabilmente rimentrato la produttività perché se faccio cose non posso fare le altre
Quindi scorpono dei concetti.
Come è stato risolto il problema?
Invece di gestire un'anomalia, semplicemente segnalarla.
E a questo punto abbiamo detto viene sollevata un'eccezione.
Sollevare un'eccezione, abbiamo detto, significa appunto segnalare la presenza di un'anomalia.
L'anomalia può essere, appunto, tipo, realizzare un'applicazione di varie serve oppure un'applicazione che prevede la stampa, prima anomalia, ma la stampante è spenta, seconda anomalia, la stampante è una carta, terza anomalia, la stampante non è il toner.
Sono tutte anomalie e questo non significa che l'applicazione non sta funzionando.
Sono tutte delle situazioni che io, che sviluppo l'applicazione, devo gestire perché so che succederà.
Queste sono quelle prevedibili o ci sono quelli imprevisti quando succede e succede.
Però il programmatore dovrebbe, ogni volta che scriva l'applicazione, a questo punto essere vigente, immaginare tutta una serie di scenari possibili e cercare ovviamente di organizzare dei piani di intervento.
Questa è la perdia di tempo.
quali sono le cose che potrebbero funzionare, quali sono gli anni di intervento, se faccio questo non penso all'applicazione.
Il senso delle cose, è chiaro?
Mi piacerebbe che voi facessero una domanda di questo genere, accetto i GPT, confermare cosa o smentire
Quello che vi ho appena detto, è vero, posso interpretare il concetto di eccezione in questo modo, in due punti, così come per lo descritto, per poi capire che tipo di risposte ci darà lui.
A noi non c'è niente, il discorso è, sono queste le domande che dovete fare, se volete ovviamente fare degli approfondimenti, da inizio dell'anno che ve lo ripeto, non cos'è un'eccezione,
Doria che ti ha detto bisogna eccezionare.
Però, perché esistono eccezioni?
Quale è lo scopo?
Quando si usano?
In effetti non sempre si usano.
Attenzione, con le eccezioni c'è un sovraccarico.
In gestione d'eccezione ovviamente c'è un sovraccarico e quindi non sempre conviene utilizzare in pratica
All'eccezione.
Sarebbe interessante scoprire perché si dice che c'è un colso per il carico.
L'over-red?
L'over-red.
Sì?
Sì, ma chissà la roba.
Il problema è perché c'è solo il carico.
Perché sono cose che si potrebbero anche evitare se funzionasse tutto bene.
No, no.
C'è tanto denosio, te l'ho detto, informatica, niente per caso.
e se ti apri per la pagina tu vedi i radontamenti ma no non sto capendo nel senso che non è una battuta è giusto quello che dici quando io ti dico le devo toccare è come se ti chiedessi di quale bit di quale byte dove si trova indica non basta dire no perché
perché ci sono istruzioni che ci... no, non sono soltanto istruzioni... vabbè, non devo fare la cosa, anche perché l'argomento, serve molto più semplice spiegare questo argomento, cioè, però hai il concetto di processo?
Sì.
Ok.
Ma anche il concetto di chiamata a funzione?
Sì.
Quando chiamo a funzione, io di fatto che faccio in pratica.
Ti dico una cosa che, effettivamente,
per fare una chiamata funziona bisogno dello stack
di percussioni e succederà qualcosa.
Se avete fatto le call in assembler, sapete che esistono.
Se vi ricordate come funziona una corda, dovreste capire tante cose, cioè la conseguenza della call.
La conseguenza di una call provoca l'aggiornamento di tutti quanti registri
e quindi cambi contesti?
Ok, quello non lo vedo.
Faccio la chiamata, coinvolgo lo stack, faccio tutto quanto l'apprendimento, carico i dati, ok, sto perdendo tempo.
Gli FT ne discorso delle chiamate a funzioni, ci sono tanti vantaggi, però ci sono anche tanti vantaggi.
In informatica niente grande, tutto un corso.
Ti piace quello?
Ok, quanto costa?
Quali sono le conseguenze?
A parte la funzione, all'interno della funzione, quando finisce la funzione?
Se ragionate in termini di assembler, quando trovate la parola RET, ok?
Anche le funzioni hanno la parola RET in fondo, la parentesi di graph è chiusa.
Ok?
Nei momenti in cui io termino la funzione, in più faccio il ritorno allo tech, perché devo sapere dove andare a tornare, perché se no non so tornare.
Lì c'è il diritto di ritorno e il ritorno.
riaggiò ad un punto e riparte.
L'eccezione, di fatto, diciamo, è una return forzata.
Perché?
Io non completo la funzione.
Non aspetto di arrivare alla fine.
Devo uscire prima, perché c'è il problema.
Bene, da quel momento in poi vado nello sec.
Vado nello sec,
c'è un redd, faccio tutto quello che devo fare dice ma lo redd dove è?
se lo gestissi io, quell'errore sarebbe sufficiente che io ci mettessi un info sarebbe sufficiente che io ci mettessi il messaggio l'errore, dice guarda che è successa questa cosa no?
e quindi praticamente è il programmatore che ha messo l'if per messaggio evitandomi di tornare nello stack
Quindi risolvo tutto in place.
Esatto.
E aspetto soltanto la naturale uscita.
È chiaro?
Quindi le eccezioni possono anche essere utilizzate per fare, se adeguatamente programmate, anche le riuscite forzate e tradiversali, no?
Dichiaro, se io decido di fare rettabilmente, è chiusura naturale, no?
Ma questo punto è chiaro, con l'incezione posso anche fare trovo.
E ritorni a una stringa, ritorni a quello che vuoi, sì.
Entriamo nella programmazione creativa, eh.
Io di fatto l'ho scoperta quando ho avuto bisogno di quello.
Io non potevo ritornare quello che tornava alla funzione.
E infatti è uscita a sporco.
Esatto.
Mi sono sentito sporco di fatti!
Questo significa il discorso della professionalità, no?
Professionalità ovviamente è utilizzata in questo momento secondo i propri fini.
Io so che una funzione, vi ho sempre detto, se deve restituire un intero, il intero deve uscire.
Ci senti?
Attenzione, qui vi sto dicendo che quella funzione è un pocheggioso.
è chiaro che non certo però ripeto la chiudo qui perché questo è un approfondimento che poi prendo in considerazione soltanto a certi livelli quindi si produrre colce sporco per i propri fini detto questo
e quindi c'è il mondo e le eccezioni sono un mondo infatti quando ritorna sullo steak e lui ritorna sul problema principale e lì il problema principale va alla ricerca e il sistema va alla ricerca del case una cosa è certa blocco la funzione blocco il problema principale sono questi meccanismi che dovete capire
Per queste cose, ve l'ho detto, la terza, la carriera, è la quarta quella tosta.
Ti facevo minchiate, una scamba, se vuoi fare così.
Perché è la quarta, l'anno più impegnativo.
Eccezioni, va bene?
Ok.
da dove riprendiamo stasera, però che vi chiedevano di fare appunto, se non in un laboratorio, prima di fare i tattori e i pettini, fate fare un pochettino, chiedevi di farvi gli esercizi.
Invece volevo fare un'altra cosa, parlare del futuro, il futuro inteso in questi termini.
Allora,
in unica futuro, una delle altre cose che vi ho chiesto, però ripeto, non mi state dicendo, non vi dico perché, una delle cose che vi ho chiesto di fare è cominciare a guardare la riferia standard del setieno.
La richiesta aveva lo scopo.
Lo scopo vuoleva, in pratica, ragionare in termini di persona che ha a disposizione un pacchetto di classi che dovrà scegliere all'interno della propria applicazione.
E poi dicevamo, in pratica, si, cominciate con due stringhe e poi, detto,
Poi vi ho detto anche un'altra cosa, l'obiettivo di questa richiesta, tant'è vero che poi vi ho dato, vi ho detto anche un'altra cosa, vi ho detto come si studiano le classi, no?
Se io devo studiare una nuova classe, è chiaro che l'importante è la implementazione, lo scopo della classe.
Ecco, secondo le cose che devo fare praticamente sono i costruttori fondamentali per capire come deve usare quella classe.
Proprietà, che messi insieme costituiscono l'interfaccia
della classe e del futuro oggetto.
Questo lo scopra questo.
Io lo chiamo studio guidato.
Sono queste le cose che non parlano mai nei corsi di informazione del professore e che sono intese per fare queste cose, per fare i mestieri.
Se non lo fate, se lo fate per la prestazione, avete sbagliato tutto.
E voi?
Poi per noi è chiaro, quello che mi consegnate è tanta roba, però non è quello che voglio.
Qui qui ci siete?
Attenzione, io mi volevo sapermare proprio su queste due classi.
Qui c'è, ci sono delle differenze concettuali tra la classe strenge e la classe vector.
Ci siete?
La classe string è molto vicina al vostro modo di costruire le classi.
Mi serve la classe string perché mi distingue le string e quindi disegno le classe string.
Gli ingredienti fondamentali sono caratteri.
L'ingrediente principale è il lavoro con i caratteri.
Il discorso dei contadori, quello è la negativa, quello è la modernità.
La cosa è certa, concettualmente io non so di lavorare con caratteri, solo esclusivamente caratteri.
Chiaro?
La stringa è fatta da caratteri.
Questa è una visione tradizionale.
tradizionale, detto per noi, cioè nel senso, una classe standard, un metodo di più che tra, poi l'implementazione, cioè, è realiente, puntata da lui, puntata da lui, c***o che c***o, c'è una cosa che cerca e so che il ingrediente principale, che ha lavoro che è il carattere, sono i caratteri, qui c'è una vector e qui le cose cambiano.
Anche perché vector non è una classe tradizionale, è proprio il concetto
Allora dice, cos'è un vetto?
Posso dare una risposta immediata, è una risposta sbagliata, ma se non me la date, perché mi fermo in quali mani?
Non è questo quello che voglio sapere, è la cosa più idiota che si possa dire.
Io ve la devo dire, mi pagano.
E' chiaro?
Quindi questa è la risposta più uscola, assolutamente non andiamo a vivere in un mentino pure a 25.
Lui infatti c'è diventato a beccare la risposta di altro.
Fatte gli scherzi.
No, non è tradizionale.
Cos'intendo tradizionale?
Intanto, praticamente, riflettiamoci bene.
Questa è la classe vector e quindi
La classe evento, se l'avete studiata, se l'avete studiata, sicuramente non l'avete studiato, questo aspetto.
Vi ricordate la lezione sui vettori da dove abbiamo, come l'abbiamo introdotta?
Cos'è un vettore?
E io vi disse, una raccolta di elementi
lo stesso tipo dimensione fissa contiguo gli elementi sono tutti quanti contiguo chiaro?
questo è la re detto anche Roberto, va bene?
attenzione il concetto di contiguità esiste anche qui dentro
ed è fondamentale.
Quali sono le operazioni che posso fare con Lolo?
Inserisci Le canoni che sono inserimento Carica Caricamento del vettore con l'inserimento La ricerca Svuotare
e il caricamento che abbiamo fatto praticamente lo facevamo sempre allo stesso modo partivamo senz'erro e andavamo avanti, va bene?
perché?
se è per tanti motivi, uno per tutti altrimenti perde un filo quindi praticamente se io devo fare il caricamento di questo fettore è chiaro, parto dall'inizio
e vado avanti fino a prendere un trovo alla fine, no?
Una delle cose che non avevamo mai fatto, e di fatto lo avremmo potuto fare, ma non aveva avuto molto senso, è cominciare a fare il tenimento della posizione centrale.
Che sensuale!
E' più comodo partire dall'inizio?
Anche perché poi è giungo, ma dove è scritto che devo partire dall'inizio?
è chiaro?
l'altra cosa che abbiamo fatto è abbiamo fatto l'ordinamento del vettore e poi abbiamo visto degli algoritmi a questo punto questa è un'altra operazione che si può fare per poter ordinare dei vettori abbiamo fatto un'altra cosa
abbiamo cercato di capire come si facevano gli scambi alla base di qualunque parlando ritmo c'era sempre uno scambio quindi abbiamo fatto l'ordinamento riflettiamo sempre sul vettore supponiamo che ad un certo punto io abbia un vettore ordinato
Beh, se io ho un obiettore ordinato, a questo punto supponiamo che io abbia la possibilità, la possibilità di inserire un elemento, mantenendolo finamente.
Questo che significa?
Significa che supponiamo che mi arrivi il sette, il sette andrei a pensare in questa posizione.
Siete?
Questo che significa in pratica?
Siccome quella posizione a sinistra c'è uno e lo devo mantenere, a destra è già occupato, ma è chiaro che potrei farlo, però ha un costo.
Il costo è
che dovrebbe spostare tutti gli elementi.
Diamo questo conto a dove ci si spazia.
Ci siete.
In conseguenza tecnicamente l'inserimento in mezzo è oneroso, dicevamo una volta a Sforza, ma ancora più oneroso se dovessi inserire... All'inizio?
L'uno.
O al schizzo.
Quindi questo significa analizzare le strutture dati, a uno schizzo abbiamo detto queste sono, così si fa.
Adesso facciamo delle riprezioni, questo è più legato.
E quando è iniziata anche questo, questo è ancora più anelloso, perché non spostare tutto quanto tutto viene a mettere la reina.
Per ricavare poi il posto.
Ci siete?
Si può fare, chiaramente si può fare.
Il problema è quanto mi costa.
Ci siete?
Benissimo.
quando io parlo di vettori queste cose devono essere sottintese quindi non basta soltanto dire a questo punto è chiaro stesso tipo una certa dimensione fissa ma ha detto anche qualcosa altro va detto che praticamente sì, dimensione fissa
Ha delle conseguenze.
Tanto è vero che potrei anche credo di averlo fatto fare.
C'è un'altra operazione che supponete che io voglia fare questo.
Voglio accelerare.
La cancellazione è onerosano perché?
Perché a quel punto mi si crea un buco e quindi chiaramente se mi si crea un buco il problema è che devo entrare in tutti quanti i buchi è chiaro?
Quindi sono tutte operazioni che noi non abbiamo mai fatto perché chiaramente eravamo concentrati sul funzionamento medio
Però ci possono essere degli algoritmi che necessitano di soluzioni, cioè mi propongono situazioni di questo genere e quindi come posso fare?
Devo gestirlo.
La cosa è certa, quando dico devo gestirlo stiamo parlando di oneri, costi, si può fare un certo quanto mi costa.
Ok, invece i tempi di riscossa, invece di essere immediati, saranno più lunghi.
E tutto andare a vere, eh?
Poi che ti aggiusti una cosa quanto possa.
Perché qui è necessario, per esempio, il riposizionamento.
Questo significa riflettere sulle strutture dati, ma non soltanto semplicemente indicando cosa fare, ma concentrandoci su come le potrò usare,
No?
Su quali sono le operazioni più onerose e meno onerose?
Ci siete?
Sì.
Ok.
Questa è la riduzione che stiamo facendo sul vettore.
La struttura è ancora più semplice.
È chiaro?
A questo punto andiamo avanti.
Rientra ovviamente nell'analisi dei problemi e delle situazioni.
Torniamo al vetto.
Cos'è il vetto?
Lo devo immaginare come una cosa di questo genere.
Una raccolta di elementi.
Una raccolta di elementi dello stesso tipo.
Attenzione!
Dello stesso tipo significa anche un'altra cosa, in pratica.
Ci possono essere altri oggetti, una raccolta di oggetti, una raccolta di numeri, di interi, di stringhi, una raccolta di qualunque cosa.
È chiaro che se lo facessi in C
sarei vincolato alle caratteristiche del vettore del C. Questo significa dimensione fissa.
Con il Vettor mi dà invece la possibilità di avere una dimensione variabile.
Quindi non è sempre obbligatorio fissare una dimensione fissa.
Questo significa, a me lo rende il Vettor.
Chiaro?
Non ci interessa come lo fa.
So che lo fa.
Il discorso è, nel momento in cui io mi fongo il problema, nel momento in cui sono io a progettare la classe elettronica, allora sì, che devo sapere come si fa.
Ma sì, ma quando praticamente uso una classe che ha progettato qualcun altro non c'è niente, so che funziona, punto.
Detto questi, il discorso è
La classe vector, abbiamo detto, non è tradizionale è un raccoglitore, tanto è vero, è ancora più strana, se ci pensate bene.
La classe vector, da sola, la posso usare.
La devo sembra abbinare a qualcosa.
A un tipo.
A un tipo.
È chiaro?
E quindi, già questo ci fa capire una cosa, che è, la classe vector
prima di essere utilizzato va specializzato è chiaro?
e la specializzazione non avviene specializzazione avviene metto dopo di che va bene?
quindi è a questo punto che faccio questo è il tipo e qui c'è il nome io sono creato l'oggetto vector che sarà il contenitore di elementi di questo tipo, va bene?
proprio il fatto che la classe vector
per il motivo per cui la classe vector da sola non la posso usare se non aggiungo questa cosa specializzazione diciamo che concettualmente la classe vector non è altro che un contenitore contenitore di cosa di cosa possono essere oggetti sempre allo stesso tipo possono essere interi possono essere valori possono essere
Qualunque cosa.
E' chiaro?
Più poi ci siete, no?
Però attenzione, io che userò la classe vector, la uso per questo motivo.
Per me la classe vector è sempre un contenitore di cui elementi sono tutti contigui.
Questo significa che
ci sarà sempre il punto 0, 1, 2, 3, quindi hanno mantenuto lo stesso punto e quindi ci possa arrivare il cono va bene?
quindi a questo punto il discorso è, la classe Vettor non è tradizionale, in effetti la classe Vettor cambia nome viene detta
ah il container è una classe container chiaro?
è una classe container una classe container che significa in pratica una classe che contiene una serie di elementi attenzione a quello che sto per dire secondo la logica degli array e qual è la logica degli array?
gli elementi di un array
Sono concettualmente continui.
Gli elementi degli arrei possono essere raggiunti direttamente attraverso l'utilizzo di un indice.
Quindi se ho 50 elementi io posso raggiungere il ventonesimo elemento semplicemente indicandone la posizione.
Questo è il senso del
vettore della rea.
La classe contene mi consente di fare anche questo.
Una cosa certa, domanda, ma realmente i 50 elementi dove si trovano gli internazionali sono effettivamente uno accanto all'altro, per quanto riguarda i lettori degli interi, sì,
per quanto riguarda quello di vector?
No.
Perché il senso s'angola per di?
No.
Una cosa è certa.
Container significa appunto mantenere le caratteristiche della cittura di riferimento senza che necessariamente la realtà
corrisponde a questa descrizione.
Poi l'implementazione io la ottenga con un vettore reale, con un caso.
Il messaggio è un container, contempore di elementi che vengono gestiti secondo la logica dei vettori.
Scrivetevi la vostra cosa.
E' chiaro?
Se mantengo la stessa logica, 50 elementi, voglio raggiungere il 35° V34 e ci vado, accesso diretto.
Mantengono la stessa logica, mantenere la stessa logica significa fare le stesse cose che facevo con gli array che c'è.
attenzione ma quello è semplicemente l'illusione realmente quei 50 elementi potrebbero essere sparsi nella rama chiaro?
poi se voglio vedere effettivamente dove si tirano quegli elementi poi apro la classe e vediamo dove stanno questi elementi però concettualmente a me non interessa concettualmente conosco la teoria sui vettori
So che sono una raccolta di elementi dello stesso tipo, i cui elementi sono a loro volta uno accanto all'altro.
Sono continui.
So che posso raggiungere qualunque elemento del array formendo la posizione.
Di conseguenza, se quello è un array, deve avere questi comportamenti.
Il problema è, come stava implementato,
Il problema è, ma gli elementi sono realmente contigli e posizionati in un termine di arame per poterlo sapere dove aprire l'obiettivo.
A noi non interessa, a noi interessa sapere che funziona.
Chi usa quella classe è chiaro, dice ok, mi sta dicendo che quella classe è una classe Vector che posso gestirla come se possano avere un chip, perfetto, la uso.
Non so come viene implementata.
E' chiaro?
Quindi un container implementato secondo le regole del vector.
Cosa vuoi dire questo?
Beh, ce ne sono delle altre.
List, the queue, eccetera eccetera eccetera.
E cosa sono?
Vector.
Ma anche vector non contiene?
Ma che significa?
Se avete guardato, se avete avuto modo di guardare, vi scoprite verodissima, anticipali, che quando parliamo di list, di container, tutti hanno luce pop, luce inserisce pop per sé.
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché cazzo ne hanno fatti quattro, cinque, sei?
perché caz
perché sennò non capite le cose è chiaro?
prima risposta hanno voluto utilizzare push e pop per ovviamente agiocolare il programmatore che si è già abituato al concetto di push al concetto di pop push significa dog, dipende dal container pop significa stripe da dog, dipende dal container
chiaro?
quei meccanismi li ha assimilati di conseguenza lo scrivo per tutti quanti e lo uso per tutti quanti il problema perché cazzo ce ne sono tante?
e a questo punto l'aspirazione è quella che vi ho dato prima vi ricordate?
cioè, come è fatto la reina, la vista, no?
a questo punto invece sì, ma cos'è una vista?
è l'impressione a coda?
e queste sono le nostre due dati e quindi praticamente decidere quale prendere se usare un vettore o usare una lista io la scelgo sulla base delle mie conoscenze io scelgo una lista se so cosa è una lista non come fatto anche il vettore sapevate come era fatto il problema è quali sono le caratteristiche di un vettore che abbiamo visto e quali sono le criticità
legate ad un vettore ci sono delle operazioni che sono onerose è chiaro?
e quindi praticamente le stesse operazioni per altre strutture dati sono meno onerose è chiaro?
il discorso è, devo conoscere punti di forza e punti di debolezza di ogni singola
di ogni singolo container.
Se conosco i punti di forte, se conosco i punti di debolezza, allora li scelgo.
Se non li conosco, prendo il primo che mi viene.
E mi viene sempre il vector.
Chiaro?
Quindi ti progetta un algoritmo.
Mi va a scegliere anche la struttura dati ad data.
Questa è la differenza tra ti scrive codice artigianale
E chi progetta i codici?
Per progettare i codici bisogna scegliere tutta la data più adeguata Dicevamo prima, posso fare tutto con i vettori?
Quanto mi costa?
Che cazzo te ne freghi?
E' importante che funzionano.
Chiaro?
Il discorso qual è in pratica?
In termini di efficienza, perdo.
Non ti aspettare grandi cose.
Il Flintstone, cioè, aveva la macchinina
Tante macchine in aereo.
Sì, sì, sì.
E' chiaro?
Quindi, questo è quello che sto cercando di dirvi.
Allora, hanno ascoltato che avevamo iniziato ad introdurre un po' di cose sulle liste e sulla potenza delle liste.
Le strutture dati fondamentali, in effetti, perché no?
Prima ancora eravamo partiti in pratica dalle verebili singole.
Poi l'evoluzione è stata stratta.
rei, dimensione fissa, elementi continui, tutti hanno il stesso tipo.
Invece il record o start, structure usa solo il C, tutto il resto è record.
Invece questo è un raccoglitore che raccoglie elementi anche di tipo differente.
anche non va abituata per l'idea del tutto.
Quando dico anche significa che è possibile anche avere una struttura con tutti gli elementi quali, chiaro?
Proprio trovi un sotto in mangioloso?
No, fai piano piano, perché se non attuori, la situazione sarà più... Vabbè se la fa per strada torna prima.
Quindi parliamo di arrei, parlando ovviamente di strutture dati statiche.
Statico significa in pratica, una volta che il dato ha fissato la dimensione quello è.
a questo punto accanto al concetto di dati statiche è stato associato le strutture dati dinamiche strutture dati dinamiche che significa che cambiano la forma a seconda ovviamente della situazione che si viene a verificare si aggiungono elementi, si tolgono elementi
è chiaro che per poter creare effetto dinamismo ho bisogno di strumenti di uguale e la scaletta era con i puntatori ok, i puntatori sono l'instrumento che vi concentra l'interaccia quindi, dietro l'effetto dimensione variabile dimensione variabile di uno array
99 su 100 c'è un puntatore poi bisogna vedere come stanno le corsature se non ci sono puntatori io quegli effetti non posso avere ci siete?
attenzione!
ma i puntatori sono un strumento quali sono le strutture dati dinamiche?
qui possiamo dire strutture dati dinamiche su alcuni libri ci sono
no, no, no è così lo dico struttura dati dinamica e non è una struttura stratta, è reale con il mutato ricominciamo a fare la prima struttura dati dinamica la prima struttura dati dinamica sono le viste va bene?
l'evoluzione
Altre strutture dati dinamiche sono le alberi.
Altre strutture dati dinamiche sono i grafi.
Ma anche qui i grafi possono essere implementati magari in tanti altri modi.
Sicuramente è una possibilità.
La ricerca artificiale
Senza di questi, senza questi strumenti non esiste.
La programmazione avanzata è finita.
Ce la giochiamo con gli alberi.
Capire il senso.
Per capire, vi faccio un esempio per farvi capire quanto è importante capire il senso e l'importanza del concetto di albero.
Bene.
Ce l'avete presente una pagina web?
Sì.
Sapete che io posso creare un intero sito basato su un'unica pagina?
Quindi il sito non è un insieme di pagina.
O non sempre è un insieme di pagina?
Un sito potrebbe anche essere un'unica pagina.
Lo sapevi?
Chiedo.
Sì, perché c'è anche l'indirizzo delle altre pagine.
Sì, no, sì, no.
Ci siete?
Il problema è un altro.
Questo significa che io ho una pagina con all'interno una serie di elementi.
e poi possono anche decidere se c'è di nuovo questo, se c'è di nuovo, cambia forma questo, è chiaro?
In questo modo, senza spostarli dalla pagina, questo significa che se io faccio, tocco la freccia in alto e a sinistra attorno a pagina precedente, vado sull'altro sito.
Quale è la dimostrazione che la pagina dinamica è tessica nel volo?
ci siete?
domanda, come si chiamano questi effetti?
gli alberi risposti con gli alberi questa pagina tecnicamente tecnicamente è descritta attraverso un albero la parola chiave DOM document object model
se conoscete quell'organizzazione potete modificare con un tipo di pagina albero e quindi le pagine rapidamente sono alberi se conosco la regola di accesso con gli elementi allora a questo punto io posso raggiungere il tempo dell'elemento a portare le dovute modifiche
Ci siete?
Ok.
Quindi, struttura dei dinamici, puntatori, liste, alberi.
Questo è l'argomento che dovremmo fare per quanto riguarda le strutture dati.
Attenzione.
Il discorso delle liste e degli alberi e l'anzorro e dei puntatori... Tutto collegato.
No, no.
Sono da replicare sui file.
se non sapete, se non conoscete queste regole non le potete applicare sugli alberi e poi scoprirete sui file e poi scoprirete che dietro database ci sono delle organizzazioni stile presenza di puntatori stile list
capire bene le liste significa replicare lo stesso concetto però con dati che sono presenti sui dischi lì non ci sono byte, lì c'è altre cose ci si vede?
quindi questo praticamente è il futuro in particolare da partire dai container
I container cosa sono, abbiamo detto?
Dei contenitori di elementi.
Chiaro?
Progettare un container è perché evidentemente voglio progettare un raccoglitore di elementi.
Ci sono già dei raccoglitori predisposti dalla C++, dalla Libria Standard, che sono la Vector, la List, the Q, e altri.
anche per esempio un mappo, anche lì è molto interessante lavorare con quelle con quella configurazione, con quelle strutture, con quel container.
Distorsione, sono tutti container ma non me ne basta uno, no?
Quei container cercano di replicare praticamente i concetti che esprimono tipo il vettore e esprimono il concetto di array list, esprimono il concetto di list, quindi devo conoscere le regole di funzionamento
ma c'è anche un'altra struttura dati molto utilizzata in maniera molto massiccia e quindi il vostro futuro prossimo saranno
è chiaro?
e quindi il nostro obiettivo sarà implementare la lista uno stack è una cosa lo stack è quella struttura stratta questa stratta struttura stratta che mi consente di implementare l'effetto chiamata di funzione una chiamata di funzione senza stack ha un senso desisto quindi gli stack
su fondamentali per fare, per far partire, praticamente, un'altra chiamata.
Le code?
Basta ricordarsi quali sono, appunto, gli schedule.
Uno schedule senza coda, non ha senso disegnare.
E quindi, chiaramente, devo conoscere le code.
mi piacerebbe di fare lo schedule se non sarebbero fatti anche le code, lì si sa che code con voi ho fatto tante cose, il fatto è che siete stati brevi a reagire, però ho fatto i spot, inizio ho perso pure un po' di tempo
però non puoi chiedere di fare certe cose se non hai quegli strumenti che non si passano con quegli strumenti è stato un caso che con voi non ho parlato non era l'argomento di questo, adesso dovevamo fare questa cosa perché adesso è previsto che vengono fatte vissere altre cose te l'ho detto con voi è stato un esplorato
E poi aspetta che restati presi voi a seguirmi.
Campiamo di rendita.
Sì e no, sì e no, nel senso che praticamente noi abbiamo visto che il grosso ce l'avete, questo sicuramente ci aiuta.
Però, però, capire quando usare uno e quando usare l'altro, come usare uno e come usare l'altro.
Noi non abbiamo tanto ricamato per esempio sulle funzioni, il passaggio dei parametri, su come lo passavamo, e poi sulle varie forme di implementazione.
Sì, poi l'abbiamo visto, implementazione con liste, implementazione con... L'abbiamo fatto a recircolare, abbiamo implementato tutto.
per voi si tratta di questo punto di panno fresco per chi se l'ha perso si tratta di studiare per lui che non c'era è morto chiaro?
quindi questo è il vostro futuro, torno indietro siamo partiti questa sera?
ok
da container ci siete?
ok, supponiamo di voler... e lo abbiamo fatto anche l'anno scorso credo, sì... supponiamo di voler implementare il container vecchio va bene?
cosa c'è dietro?
il fatto di usare questo cosa sentassi?
ci dovrebbe venire per subito a reggire in questo modo.
Che significa questa cosa?
Bene, ogni volta che vedete questa combinazione per intitangolare con i potenti, bene, a questo punto dietro... C'è anche un po' di...
C'è il template e dicevamo, cosa si intende per template?
Cosa sono i template?
Intanto qual'è il concetto di template?
Il concetto di template significa, dicevamo, programmazione generica.
Programmazione generica in che senso?
Adesso ci vai in che senso?
Da quale punto di vista?
Dal punto di vista dei tipi.
Realizzare un'applicazione generica è chiaro, non ha senso, detto così, ma rispetto ai tipi.
Cosa vuol dire?
Invece di realizzare un'applicazione con tipi noti e quindi specializzare un'applicazione e farla funzionare solo per gli interi puoi realizzare una seconda applicazione solo per i float
che fa le stesse cose.
Questo significa web 1.0 che significa ogni pagina un colore diverso.
Qualcosa è successo in pratica, programmazione dinamica, un'unica pagina, una regola da cambiare.
Cambiavo la regola ma la pagina era sempre la stessa.
quindi template significa invece di lavorare con un tipo specifico ho la possibilità di lavorare con diversi tipi quindi io progetto un'applicazione che funziona con tipi differenti, cioè con lo stesso tipo adattabile a diversi tipi e lo stesso tipo è un tipo generico il problema è che se ci pensate bene
Detta così, non ha senso parlare di tipi generici, è chiaro?
E quindi, cos'è il tipo generico?
Si chiama template.
E come si crea un tipo generico?
Chi lo crea?
Lo mette a disposizione linguaggio?
No, siamo noi.
template class t chi è il tipo?
t come lo usi?
come se fosse un tipo
Tempere di memoria.
Allora, tipo 8 più 16.
o type, chiaro?
Questa è la funzione.
A questa funzione io sto fornendo un tipo, un parametro, un parametro di tipo generico.
Va bene?
A questo punto come uso questo parametro?
Semplicemente chiedendo di visualizzare, chiaro?
il contenuto che si è stato assegnato al momento del reclamato faccio a me il dichiaro intero a cui assegno un valore 5 e lo passo come parametro alle F siete?
a questo punto io mi aspetto che qui compagna i 5 ci siete?
cosa vuoi dire?
per apprezzare, potremmo farlo in altri modi, usiamo, sfruttiamo anche lo strumento del C++ string B è uguale... ciao ci siete?
a questo punto cosa faccio?
faccio la chiamata passando come il parametro B ma in questo momento B è una stringa quindi qualsiasi funzione funziona svolghi il suo compito sia con gli interi che con le stringe è chiaro?
sia con i flot che con i char
È chiaro?
Attenzione.
No, no.
Per un'altra cosa.
No.
Scusate, stavo nella partita anzitutto.
Allora, dicevamo, queste sono le funzioni
Come si crea una funzione template?
Cos'è una funzione template, una funzione generica?
Che significa funzione generica, una funzione che può lavorare a questo punto con tipi differenti e completamente svincolata da qualunque tipo, è chiaro?
come si costruisce una funzione template regola attenzione questa poppia deve viaggiare insieme quindi definisco il template quindi il modello di riferimento gli assegno un nome utilizzando la sintassi class nome del tipo generico lo uso all'interno della
nostra funzione.
In questo caso lo sto usando come parametro, potrei anche non usarlo.
Allora mettici external, almeno, con un po' di senso.
No, comunque, facciamo la chiamata.
Ok, questa C, che è generica, per cui per avere cagato.
No, aspetta un attimo, eh.
Per forza di essere un parametro.
No, no, no, no, no.
Facciamo una cosa di questo genere.
Perché questo diamante funziona.
Se è una extra... Vediamo se funziona, se non dovrei.
No, perché non ha senso.
Per te non viene inizializzato, non succede niente, esiste, così.
Nel momento in cui chiami la funzione non ha nessun tipo a cui assegnare il compilatore quando crea la funzione.
come fa a riconoscere che tipo è b?
che deve essere per forza nei parametri a meno che fai una classe e gli metti qualche proprietà fai una classe con delle proprietà?
no, la classe è un'altra cosa queste sono le funzioni template è chiaro?
quindi la regola per costruire una funzione template
che lavora con dei tipi generici che poi vengono specializzati domanda la specializzazione dove avviene?
compilazione nel mail e nello specifico durante la fase di compilazione chiaro?
perché?
il compilatore si accorge che questa è la stringa e a questo punto specializza il parametro e in cascata avverrà la specializzazione di tutto l'uso, tutte le oporenze di quel parametro quindi la specializzazione avverrà, attenzione ha detto
Non è dinamica statica, non è il runtime.
C'è quel termine che usano su CNR, che era scritto nelle eccezioni tra l'altro.
Ci siete?
Priempti, forse.
Ti si specializza quando la valore è specializzata.
C'è il sito di un liveo aperto, per caso?
Cioè, ti dico, ok, ti passo l'intero.
Quindi è il main che decide, guarda, a quella frontiera io voglio passarlo intero.
Prendo l'intero, lo confeziono e te lo passo.
Ma a quanto tempo ti passo l'intero?
Cioè come tu in cui devo avvisare la funzione e dirgli, oh chi c'ha?
Tu stai lavorando con un tipo generico, no?
Attenzione, sta per riparti un intero, quindi diventerai, questa T deve diventare un intero.
Qual è il momento esatto in cui avviene questa cosa?
La risposta è durante la fase di compilazione.
Chiaro?
Non il runtime.
Ah no, l'ho visto.
L'ho aperto il tempo.
Il runtime invece succede un'altra cosa.
Il runtime succede un'altra cosa.
Il polimorfismo che lo fa il runtime.
Nel senso che durante l'esefuzione
Sì, ma prima ho già fatto la compilazione.
Ho fatto già la traduzione.
Il runtime significa che non ho ancora preso la decisione.
Qui invece, in compilazione, ho già deciso che passerò intero.
Perché c'è comunque, c'è la chiamata.
È chiaro?
Vabbò, questo è l'ultimo, ma non ultimo.
Ultimo, ma non ultimo.
La spandanda è questa.
La spandanda è questa.
La spandanda è questa.
La spandanda è questa.
La spandanda è questa.
La spandanda è questa.
La spandanda è questa.
La spandanda è questa.
Sì, non ho mai sentito, la prima volta lo sento e ce l'ho sentito qua.
Manca il nome.
No, manca il nome.
in mossa.
Senti.
Puoi fare il tipo di ritorno?
No, vorremmo fare una cosa anche silenzio.
Che tipo di esse?
Aspetta, aspetta.
T-reference.
Allora, la cacacchia.
Ok Vengo io?
No, devo metterci il corso, forza.
Il corso dottore?
No, no.
si chiamano Static Binding e Dynamic Binding Static è perché è in Compile Time e Dynamic è perché è in Runtime.
Prova di parlare di Early Binding e Late Binding.
Ah si, Early Binding e Static Binding.
C'è bisogno di robi.
Ah, troppo orgoglioso.
Sai perché non mi mandi gli esercizi?
Provate questa.
Allora...
In questo caso, 70.000 a tanto, ho creato una classe template che significa una classe che lavora con un tipo generico di nome T Come lo sto usando?
Lo sto utilizzando per... Eh, però non c'è un problema
lo sto utilizzando in pratica all'interno del costruttore e lo sto utilizzando come tipo di parametro da passare però il template andrebbe anche sul costruttore allora quel template lì vale per le proprietà della classe
Se tu vuoi usarlo così nel costruttore devi scrivere un'altra volta a template per il costruttore.
Nì, nel senso che ti dico subito.
Il problema, ecco, in effetti questo lo dovete provare, perché... No, un problema per vota, un problema per vota.
Poi chiariamo, è giusto quello che hai detto, però ti faccio allontare una cosa.
Quindi, qui il nuovo tipo lo sto utilizzando
come parametro da passare al prossimitore.
La magia avverrà nel main, nel senso che è il main che vuole lavorare con gli interi, quindi deve specializzare.
Vecchia classe, nuovo tipo, parentesi tonda,
il parametro, in questo caso gli sto chiedendo di passare un intero quindi quella T verrà specializzata in intero se ci fosse stato un float avremmo aggiunto un float, se ci fosse stata una stringa avremmo aggiunto una stringa, è chiaro?
Ok, per adesso ci perdiamo, perché c'è un intervallo.
La cosa che dice di te che è chiusa, sai quando?
L'implementazione.
L'implementazione separata.
Se la tieni nella classe, lui si tira dietro.
Si?
Ok, ok, ho capito.
Quando la metti fuori, tu fai separati, che lì ti crea problemi, che ci metti lo stesso.
No, no, ma anche se lo stesso fai, in realtà, quando fai le classi
Le classi template, tu le devi per forza fare sullo stesso file.
Perché se le fai su un altro file, vuol dire che tu le stai già a specialità.
No, magari se è fuori della classe.
Sì, l'importante è che, cioè, sarei di chiare all'interno del file.
Scusate?
No, all'interno della classe.
Esatto, all'interno della classe.
Non dà problemi.
Senti, puoi essere sullo stesso file.
Sì, devi dare piedi.
